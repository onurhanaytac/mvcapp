@model IEnumerable<WebApplication1.Models.Country>

@{
    ViewBag.Title = "Index";
}

<div id="country-map" style="margin-top: 20px;"></div>
<div id="country-grid" style="margin-top: 20px;"></div>
<div id="dialog"></div>'
<div id="add-new-btn-container">
    <button onclick="addNewCountry(event)" class="fixed-new-btn">
        <span class="k-icon k-i-plus icon-font-32"></span>
    </button>
</div>

<section id="confirm-section"></section>

<script>
    var filterOptions = {
        SortOrder: "Population_desc",
        SearchString: "",
        Page: 1,
        PageSize: 10,
        SelectedCountries: []
    }

    var topFivePopulated;

    $(document).ready(() => {
        /**
         * Create app
         */
        //createInitialData((err, result) => {
        //    if (err) {
        //        return console.log(err);
        //    }
        //    createMap();
        //    createGrid();
        //});

        createMap();
        createGrid();
        addSearchInputEvents();
    });

    function createMap() {
        var map = AmCharts.makeChart("country-map", {
            "type": "map",
            "theme": "light",
            "projection": "eckert3",
            "dataProvider": {
                "map": "worldLow",
                "getAreasFromMap": true
            },
            "areasSettings": {
                "selectedColor": "#CC0000",
                "selectable": true
            },
            /**
             * Add click event to track country selection/unselection
             */
            "listeners": [{
                "event": "clickMapObject",
                "method": function (e) {

                    // Ignore any click not on area
                    if (e.mapObject.objectType !== "MapArea")
                        return;

                    var area = e.mapObject;

                    // Toggle showAsSelected
                    area.showAsSelected = !area.showAsSelected;
                    e.chart.returnInitialColor(area);

                    // Update the list
                    var selectedCountries = getSelectedCountries();
                    //var grid = $("#country-grid").data("kendoGrid");
                    //var dataSource = grid.dataSource;

                    //dataSource.filter({
                    //    // leave data items which are "Food" or "Tea"
                    //    logic: "or",
                    //    filters: selectedCountries
                    //});

                    filterOptions.SelectedCountries = selectedCountries;
                    filterOptions.Page = 1;
                    $("#country-grid").data("kendoGrid").dataSource.page(1);
                    //$("#country-grid").data("kendoGrid").dataSource.read();
                }
            }]
        });

        /**
         * Function which extracts currently selected country list.
         * Returns array consisting of country ISO2 codes
         */
        function getSelectedCountries() {
            var selected = new Array();
            for (var i = 0; i < map.dataProvider.areas.length; i++) {
                if (map.dataProvider.areas[i].showAsSelected)
                    //selected.push({ field: "Code", operator: "startswith", value: map.dataProvider.areas[i].id });
                    selected.push(map.dataProvider.areas[i].id);
            }
            return selected;
        }
    }

    function createGrid() {
        var dataSource = new kendo.data.DataSource({
            pageSize: filterOptions.PageSize,
            transport: {
                read: {
                    url: '@Url.Action("GetCountries", "Countries")',
                    dataType: "json",
                    type: "get",
                    traditional: true,
                    data: filterOptions
                },
                parameterMap: (data, type) => {
                    if (type === "read") {
                        return filterOptions;
                    }

                    return data;
                }
            },
            serverPaging: true,
            //serverFiltering: true,
            schema: {
                model: {
                    id: "ID"
                },
                total: response => {
                    return response.total; // total is returned in the "total" field of the response
                },
                data: response => {
                    setTopFivePopulated(response.topFivePopulated);
                    return response.data;
                }
            },
            change: e => {
                if (e.action === "itemchange") {
                    ajaxPostAsync("UpdateCountry", e.items[0], (err, result) => {
                        if (err) {
                            return console.log(err);
                        }
                        $("#country-grid").data("kendoGrid").refresh();
                    });
                } else if (e.action === "remove") {
                    var dataItem = e.items[0];
                    ajaxPostAsync("DeleteCountry", {ID: dataItem.ID}, (err, result) => {
                        if (err) {
                            $("#country-grid").data("kendoGrid").read();
                            return console.log(err);
                        }
                    });
                }
            }
        });

        $("#country-grid").kendoGrid({
            height: 450,
            editable: {
                mode: "incell",
                confirmation: false
            },
            allowCopy: true,
            pageable: true,
            sortable: true,
            confirmation: "Are you sure?",
            columns: [
                {
                    field: "Flag",
                    template: `<img src="../../Content/flags/#:Flag#" height="64" width="128">`,
                    width: 140,
                    editable: dataItem => {
                        return false;
                    }
                },
                { field: "FullName" },
                { field: "CapitalCity" },
                {
                    field: "Population",
                    format: "{0:n0}",
                },
                {
                    command: [
                        { name: "info", text: " ", className: "command-icon-btn", iconClass: "k-icon k-i-info", click: showInfo },
                        { name: "destroy", text: " ", className: "command-icon-btn" }
                    ],
                    width: 80
                }
            ],
            dataSource: dataSource,
            sort: onGridSort,
            page: onPageClick,
            dataBound: colorizeRows
        });

        $("#country-grid tbody").on("mouseenter", "tr", function (e) {
            $(".k-button", e.currentTarget).addClass("showme");
        });

        $("#country-grid tbody").on("mouseleave", "tr", function (e) {
            $(".k-button", e.currentTarget).removeClass("showme");
        });

        $(window).trigger("resize");
    }

    var delay = (function () {
        var timer = 0;
        return function (callback, ms) {
            clearTimeout(timer);
            timer = setTimeout(callback, ms);
        };
    })();

    function addSearchInputEvents() {
        var input = $("#search-input");
        input.keyup(e => {
            filterOptions.SearchString = input.val();
            delay(() => {
                filterOptions.Page = 1;
                $("#country-grid").data("kendoGrid").dataSource.read();
            },500);
        });
    }

    function setTopFivePopulated(topFive) {
        topFivePopulated = topFive
    }

    function colorizeRows() {
        var grid = $("#country-grid").data("kendoGrid");
        var dataSource = grid.dataSource;

        var topFiveInTheGrid = _.compact(_.map(topFivePopulated, item => {
            return dataSource.get(item.ID);
        }));

        _.each(topFiveInTheGrid, item => {
            $("#country-grid").find('[data-uid="' + item.uid + '"]').addClass("top-five");
        });
    }

    function onGridSort(e) {
        filterOptions.SortOrder = e.sort.field + "_" + e.sort.dir;
    }

    function onPageClick(e) {
        filterOptions.Page = e.page;
    }

    function addNewCountry() {

        var confirmElement = $("#confirm");

        if (!confirmElement.length) {
            $("#confirm-section").append(`<div id="confirm"></div>`);
            confirmElement = $("#confirm");
        }

        confirmElement.kendoConfirm({
            title: "Add New Country!",
            content: `
                <form id="new-country-form">
                    <div class ="form-group">
                        <input type="text" class ="form-control" id="Name" name="Name" placeholder="Name" required>
                    </div>

                    <div class ="form-group">
                        <input type="text" class ="form-control" id="FullName" name="FullName" placeholder="FullName" required>
                    </div>

                    <div class ="form-group">
                        <input type="text" class ="form-control" id="Code" name="Code" placeholder="Code" required>
                    </div>

                    <div class ="form-group">
                        <input type="text" class ="form-control" id="Currency" name="Currency" placeholder="Currency" required>
                    </div>

                    <div class ="form-group">
                        <input type="text" class ="form-control" id="Language" name="Language" placeholder="Language" required>
                    </div>

                    <div class ="form-group">
                        <input type="text" class ="form-control" id="CapitalCity" name="CapitalCity" placeholder="CapitalCity" required>
                    </div>

                    <div class ="form-group">
                        <input type="text" class ="form-control" id="Population" name="Population" placeholder="Population" required>
                    </div>

                    <div class ="form-group">
                        <input type="text" class ="form-control" id="Region" name="Region" placeholder="Region" required>
                    </div>

                    <div class ="form-group" style="width: calc(100% - 25px);">
                        <label>Flag</label>
                        <input name="files" id="files" type="file" />
                    </div>
                </form>
            `,
            messages: {
                okText: "ADD"
            }
        }).data("kendoConfirm")
            .result.done(() => {
                var form = $("#new-country-form");

                if (!form.valid()) {
                    return addNewCountry();
                }

                var data = form.serialize();
                console.log(data);
                
            })
            .fail(() => {
                console.log("User rejected");
            });

        $("#files").kendoUpload({
            async: {
                saveUrl: "chunkSave",
                removeUrl: "remove",
                chunkSize: 11000,
            },
            directory: true,
            directoryDrop: true
        });
    }

    function createInitialData(callback) {
        var data = createCountryInformation();

        ajaxPostAsync("CreateInitialData", data, (err, result) => {
            if (err) {
                return callback(err);
            }
            callback(null, result);
        });
    }

    function ajaxPostAsync(methodName, params, callback) {
        $.ajax({
            url: '@Url.Action("strMethodName", "Countries")'.replace("strMethodName", methodName),
            type: "POST",
            data: JSON.stringify(params),
            dataType: "json",
            traditional: true,
            contentType: "application/json; charset=utf-8",
            success: success => {
                callback(null, success);
            },
            error: error => {
                callback(error);
            }
        });
    }

    function createCountryInformation() {
        var _countries = [];

        countries.forEach(country => {
            var _country = {};
            _country["Name"] = country.name;
            _country["FullName"] = country.nativeName;
            _country["Code"] = country.alpha2Code;
            _country["Currency"] = country.currencies[0].name + " (" + country.currencies[0].symbol + ")";
            _country["Flag"] = country.alpha2Code + "-128.png";
            _country["Language"] = country.languages[0].name;
            _country["CapitalCity"] = country.capital;
            _country["Population"] = country.population;
            _country["Region"] = country.region;

            _countries.push(_country);
        });

        return _countries;
    }

    function showHideCommandButtons(row) {
        var tree = $("#country-grid").data("kendoGrid");
        var tableRows = tree.tbody.find('tr');

        var buttonsToHide = ["movedown", "moveup", "edit", "destroy"];

        _.each(buttonsToHide, button => {
            $(tableRows[0]).find(`[data-command='` + button + `']`).removeClass("showme");
        });
    }

    function showInfo(e) {
        var dataItem = _.clone($("#country-grid").data("kendoGrid").dataItem($(e.target).closest("tr")));

        _.each(dataItem, (item, i) => {
            if (!item) {
                dataItem[i] = "N/A"
            }
        });
        dataItem.Population = kendo.toString(dataItem.Population, "n0")

        $("#dialog").kendoDialog({
            title: "Country Detail",
            content:
                '<div style="width: 400px; height: 200px;">'
                    +
                    '<div class="info-item"><span>Code   </span><strong style="float: right;">' + dataItem.Code + '</strong></div>'
                    +
                    '</br>'
                    +
                    '<div class="info-item"><span>Name   </span><strong style="float: right;">' + dataItem.Name + '</strong></div>'
                    +
                    '</br>'
                    +
                    '<div class="info-item"><span>FullName   </span><strong style="float: right;">' + dataItem.FullName + '</strong></div>'
                    +
                    '</br>'
                    +
                    '<div class="info-item"><span>Currency   </span><strong style="float: right;">' + dataItem.Currency + '</strong></div>'
                    +
                    '</br>'
                    +
                    '<div class="info-item"><span>CapitalCity   </span><strong style="float: right;">' + dataItem.CapitalCity + '</strong></div>'
                    +
                    '</br>'
                    +
                    '<div class="info-item"><span>Region   </span><strong style="float: right;">' + dataItem.Region + '</strong></div>'
                    +
                    '</br>'
                    +
                    '<div class="info-item"><span>Population   </span><strong style="float: right;">' + dataItem.Population + '</strong></div>'
                    +
                '</div>'
        });

        $("#dialog").data("kendoDialog").open();
    }

    $(window).resize(e => {
        var width = e.target.innerWidth;
        var grid = $("#country-grid").data("kendoGrid");

        if (!grid) {
            return;
        }

        switch (true) {
            case (width < 500):
                grid.hideColumn("Flag");
                grid.hideColumn("Population");
                grid.hideColumn("CapitalCity");
                break;
            case (width < 600):
                grid.hideColumn("Population");
                grid.hideColumn("CapitalCity");
                grid.showColumn("Flag");
                break;
            case (width < 768):
                grid.hideColumn("CapitalCity");
                grid.showColumn("Population");
                grid.showColumn("Flag");
                break;
            default:
                grid.showColumn("Population");
                grid.showColumn("Flag");
                grid.showColumn("CapitalCity");
        }
    });

</script>